name: Build and Sign iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-sign:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        # Install ios-deploy for device deployment (optional)
        brew install ios-deploy

    - name: Import certificates
      env:
        P12_BASE64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      run: |
        # Create temporary directory for certificates
        mkdir -p ~/certs

        # Decode P12 certificate from base64
        echo "$P12_BASE64" | base64 --decode > ~/certs/certificate.p12

        # Verify P12 file was created
        ls -lh ~/certs/certificate.p12
        echo "P12 file size: $(wc -c < ~/certs/certificate.p12) bytes"

        # Test P12 password with openssl first
        echo "Testing P12 file with openssl..."
        openssl pkcs12 -in ~/certs/certificate.p12 -passin "pass:$P12_PASSWORD" -noout -info || {
          echo "ERROR: Failed to read P12 with openssl"
          exit 1
        }

        # Create temporary keychain
        KEYCHAIN_NAME="ios-build.keychain-db"
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

        # Import certificate (use -A to allow all apps)
        security import ~/certs/certificate.p12 \
          -k "$KEYCHAIN_NAME" \
          -P "$P12_PASSWORD" \
          -A

        # Set key partition list
        security set-key-partition-list \
          -S apple-tool:,apple: \
          -k "$KEYCHAIN_PASSWORD" \
          "$KEYCHAIN_NAME"

        # Add to keychain search list
        security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed s/\"//g)

        # Verify certificate is available
        security find-identity -v -p codesigning "$KEYCHAIN_NAME"

        # Store keychain password for cleanup
        echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
        echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV

    - name: Install provisioning profile
      env:
        PROVISION_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
      run: |
        # Create provisioning profiles directory
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

        # Decode and save provisioning profile
        echo "$PROVISION_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

        # Extract UUID and create proper filename
        PROFILE_UUID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -extract UUID raw -)
        cp ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${PROFILE_UUID}.mobileprovision

        # Save profile path for signing
        echo "PROVISION_PROFILE=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision" >> $GITHUB_ENV

    - name: Build iOS app from source
      run: |
        # Compile the app from source
        echo "Building iOS app from main.c..."

        # Create build directory
        mkdir -p build

        # Compile for arm64 (iOS device)
        xcrun -sdk iphoneos clang \
          -arch arm64 \
          -miphoneos-version-min=13.0 \
          -o build/SampleApp \
          app/main.c

        # Create app bundle structure
        mkdir -p build/SampleApp.app
        cp build/SampleApp build/SampleApp.app/

        # Extract bundle ID from provisioning profile
        BUNDLE_ID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -extract Entitlements.application-identifier raw - | sed 's/.*\.//')
        echo "Extracted Bundle ID: $BUNDLE_ID"

        # Create Info.plist
        cat > build/SampleApp.app/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>SampleApp</string>
          <key>CFBundleIdentifier</key>
          <string>$BUNDLE_ID</string>
          <key>CFBundleName</key>
          <string>SampleApp</string>
          <key>CFBundleVersion</key>
          <string>1.0</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>MinimumOSVersion</key>
          <string>13.0</string>
          <key>UIRequiredDeviceCapabilities</key>
          <array>
            <string>arm64</string>
          </array>
        </dict>
        </plist>
        EOF

        echo "APP_BUNDLE_PATH=build/SampleApp.app" >> $GITHUB_ENV
        echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV

    - name: Create entitlements file
      run: |
        # Extract entitlements from provisioning profile
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -extract Entitlements xml1 -o build/Entitlements.plist -

        echo "ENTITLEMENTS_PATH=build/Entitlements.plist" >> $GITHUB_ENV

    - name: Sign iOS app
      run: |
        # Get signing identity
        SIGNING_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -E "^[[:space:]]*1\)" | grep -oE "[A-F0-9]{40}" | head -1)
        echo "Signing with identity: $SIGNING_IDENTITY"

        # Embed provisioning profile
        cp ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision "$APP_BUNDLE_PATH/embedded.mobileprovision"

        # Remove extended attributes
        xattr -cr "$APP_BUNDLE_PATH"

        # Sign the app
        codesign --force \
          --sign "$SIGNING_IDENTITY" \
          --entitlements "$ENTITLEMENTS_PATH" \
          --timestamp=none \
          --verbose \
          "$APP_BUNDLE_PATH"

        # Verify signature
        codesign --verify --verbose "$APP_BUNDLE_PATH"
        codesign -dvvv "$APP_BUNDLE_PATH"

    - name: Create IPA
      run: |
        # Create output directory
        mkdir -p output

        # Create Payload directory
        mkdir -p output/Payload

        # Copy signed app
        cp -R "$APP_BUNDLE_PATH" output/Payload/

        # Create IPA
        (cd output && zip -qr SampleApp.ipa Payload)

        # Cleanup
        rm -rf output/Payload

        echo "IPA created at: output/SampleApp.ipa"

    - name: Upload signed IPA
      uses: actions/upload-artifact@v4
      with:
        name: signed-ios-app
        path: output/SampleApp.ipa
        retention-days: 30

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/SampleApp.app
          build/Entitlements.plist
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        # Delete temporary keychain
        if [ -n "$KEYCHAIN_NAME" ]; then
          security delete-keychain "$KEYCHAIN_NAME" || true
        fi

        # Remove certificates
        rm -rf ~/certs
